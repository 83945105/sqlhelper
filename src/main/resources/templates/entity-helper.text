package [[${setting.packagePath}]];

import pub.avalon.sqlhelper.core.builder.*;
import pub.avalon.sqlhelper.core.helper.*;

import java.util.LinkedHashMap;
import java.util.Map;
[# th:each="classPath : ${table.classPaths}"]
import [(${classPath})];
[/]

@SuppressWarnings("all")
public class [[${table.tableAlias}+${table.generateOptions.entitySuffix}]] {
[# th:if="${table.columns != null}"]
    [# th:each="column : ${table.columns}"]
        [# th:if="${table.generateOptions.entityFieldComment == true}"]
            /**
             * [(${column.comment})]
             */
        [/] private [(${table.getJavaType(column).className})] [(${table.getColumnAlias(column)})];
    [/]
[/]
[# th:if="${table.columns != null}"]
    [# th:each="column : ${table.columns}"]
        public [(${table.getJavaType(column).className})] [(${table.getGetterMethodName(column)})]() {
            return this.[(${table.getColumnAlias(column)})];
        }
        [# th:switch="${table.generateOptions.entityChain == true}"]
            [# th:case="true"]
                public [[${table.tableAlias}+${table.generateOptions.entitySuffix}]] [(${table.getSetterMethodName(column)})]([(${table.getJavaType(column).className})] [(${table.getColumnAlias(column)})]) {
                    this.[(${table.getColumnAlias(column)})] = [(${table.getColumnAlias(column)})];
                    return this;
                }
            [/]
            [# th:case="false"]
                public void [(${table.getSetterMethodName(column)})]([(${table.getJavaType(column).className})] [(${table.getColumnAlias(column)})]) {
                    this.[(${table.getColumnAlias(column)})] = [(${table.getColumnAlias(column)})];
                }
            [/]
        [/]
    [/]
[/]
    public final static class [(${table.generateOptions.helperClassName})] implements TableHelper<[(${table.generateOptions.helperClassName})], [(${table.generateOptions.helperClassName})].On, [(${table.generateOptions.helperClassName})].Column, [(${table.generateOptions.helperClassName})].Where, [(${table.generateOptions.helperClassName})].Group, [(${table.generateOptions.helperClassName})].Sort> {
        [# th:if="${table.generateOptions.entityFieldComment == true}"]
            /**
             * 表名
             */
        [/] public final static String tableName = "[(${table.tableName})]";
        [# th:if="${table.generateOptions.entityFieldComment == true}"]
            /**
             * 表 - 别名
             */
        [/] public final static String tableAlias = "[(${table.tableAlias})]";
        [# th:if="${table.primaryKeyColumn != null && table.generateOptions.entityFieldComment == true}"]
            /**
             * 主键名
             */
        [/] public final static String primaryKeyName = "[(${table.primaryKeyColumn.name})]";
        [# th:if="${table.primaryKeyColumn != null && table.generateOptions.entityFieldComment == true}"]
            /**
             * 主键 - 别名
             */
        [/] public final static String primaryKeyAlias = "[(${table.getColumnAlias(table.primaryKeyColumn)})]";
        [# th:each="column : ${table.columns}"]
            [# th:if="${table.generateOptions.entityFieldComment == true}"]
                /**
                 * [(${column.comment})]
                 */
            [/] public final static String [(${column.name})] = "[(${column.name})]";
            [# th:if="${table.generateOptions.entityFieldComment == true}"]
                /**
                 * [(${column.comment})] - 别名
                 */
            [/] public final static String [(${column.name})]_alias = "[(${table.getColumnAlias(column)})]";
        [/]
        [# th:if="${table.generateOptions.entityFieldComment == true}"]
            /**
             *  列名 - 别名 键值对集合
             */
        [/] public final static Map<String, String> columnNameAliasMap;

        static {
            columnNameAliasMap = new LinkedHashMap<>([(${table.columns.size()})]);
            [# th:each="column : ${table.columns}"]
                columnNameAliasMap.put([(${column.name})], [(${column.name})]_alias);
            [/]
        }

        public static On on() {
            return new On();
        }

        public static Column column() {
            return new Column();
        }

        public static Where where() {
            return new Where();
        }

        public static Group group() {
            return new Group();
        }

        public static Sort sort() {
            return new Sort();
        }

        @Override
        public Map<String, String> getColumnNameAliasMap() {
            return columnNameAliasMap;
        }

        @Override
        public String getTableName() {
            return tableName;
        }

        @Override
        public String getTableAlias() {
            return tableAlias;
        }

        @Override
        public String getPrimaryKeyName() {
            return primaryKeyName;
        }

        @Override
        public String getPrimaryKeyAlias() {
            return primaryKeyAlias;
        }

        @Override
        public On newOnHelper() {
            return on();
        }

        @Override
        public Column newColumnHelper() {
            return column();
        }

        @Override
        public Where newWhereHelper() {
            return where();
        }

        @Override
        public Group newGroupHelper() {
            return group();
        }

        @Override
        public Sort newSortHelper() {
            return sort();
        }

        public final static class On extends OnHelper<On> {

            private On() {
                super();
            }

            public OnSqlPartDatumBuilder<On> primaryKey() {
                return this.apply(tableName, tableAlias, primaryKeyName, primaryKeyAlias);
            }

            [# th:each="column : ${table.columns}"]
                public OnSqlPartDatumBuilder<On> [(${table.getColumnAlias(column)})]() {
                    return this.apply(tableName, tableAlias, [(${column.name})], [(${column.name})]_alias);
                }
            [/]

        }

        public final static class Column extends ColumnHelper<Column> {

            private Column() {
                super();
            }

            public Column primaryKey() {
                return this.apply(tableName, tableAlias, primaryKeyName, primaryKeyAlias).getHelper();
            }

            public Column primaryKey(String alias) {
                return this.apply(tableName, tableAlias, primaryKeyName, alias).getHelper();
            }

            [# th:each="column : ${table.columns}"]
                public Column [(${table.getColumnAlias(column)})]() {
                    return this.apply(tableName, tableAlias, [(${column.name})], [(${column.name})]_alias).getHelper();
                }

                public Column [(${table.getColumnAlias(column)})](String alias) {
                    return this.apply(tableName, tableAlias, [(${column.name})], alias).getHelper();
                }
            [/]

        }

        public final static class Where extends WhereHelper<Where> {

            private Where() {
                super();
            }

            public WhereSqlPartDatumBuilder<Where> primaryKey() {
                return this.apply(tableName, tableAlias, primaryKeyName, primaryKeyAlias);
            }

            [# th:each="column : ${table.columns}"]
                public WhereSqlPartDatumBuilder<Where> [(${table.getColumnAlias(column)})]() {
                    return this.apply(tableName, tableAlias, [(${column.name})], [(${column.name})]_alias);
                }
            [/]

        }

        public final static class Group extends GroupHelper<Group> {

            private Group() {
                super();
            }

            public Group primaryKey() {
                return this.apply(tableName, tableAlias, primaryKeyName, primaryKeyAlias).getHelper();
            }

            [# th:each="column : ${table.columns}"]
                public Group [(${table.getColumnAlias(column)})]() {
                    return this.apply(tableName, tableAlias, [(${column.name})], [(${column.name})]_alias).getHelper();
                }
            [/]

        }

        public final static class Sort extends SortHelper<Sort> {

            private Sort() {
                super();
            }

            public SortSqlPartDatumBuilder<Sort> primaryKey() {
                return this.apply(tableName, tableAlias, primaryKeyName, primaryKeyAlias);
            }

            [# th:each="column : ${table.columns}"]
                public SortSqlPartDatumBuilder<Sort> [(${table.getColumnAlias(column)})]() {
                    return this.apply(tableName, tableAlias, [(${column.name})], [(${column.name})]_alias);
                }
            [/]

        }

    }

}