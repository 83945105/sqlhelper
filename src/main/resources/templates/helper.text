package [[${setting.packagePath}]];

import pub.avalon.sqlhelper.core.beans.*;
import pub.avalon.sqlhelper.core.builder.*;
import pub.avalon.sqlhelper.core.helper.*;

import java.util.LinkedHashSet;
import java.util.Set;
import java.lang.String;

@SuppressWarnings("all")
public final class [(${table.tableAlias})][(${table.generateOptions.helperClassName})] implements TableHelper<[(${table.tableAlias})][(${table.generateOptions.helperClassName})], [(${table.tableAlias})][(${table.generateOptions.helperClassName})].Join, [(${table.tableAlias})][(${table.generateOptions.helperClassName})].Column, [(${table.tableAlias})][(${table.generateOptions.helperClassName})].Where, [(${table.tableAlias})][(${table.generateOptions.helperClassName})].Group, [(${table.tableAlias})][(${table.generateOptions.helperClassName})].Having, [(${table.tableAlias})][(${table.generateOptions.helperClassName})].Sort> {

    public final static [(${table.tableAlias})][(${table.generateOptions.helperClassName})] HELPER = new [(${table.tableAlias})][(${table.generateOptions.helperClassName})]();

    [# th:if="${table.generateOptions.entityFieldComment == true}"]
        /**
         * 表名
         */
    [/] public final static String TABLE_NAME = "[(${table.tableName})]";
    [# th:if="${table.generateOptions.entityFieldComment == true}"]
        /**
         * 表 - 别名
         */
    [/] public final static String TABLE_ALIAS = "[(${table.tableAlias})]";
    [# th:if="${table.primaryKeyColumn != null && table.generateOptions.entityFieldComment == true}"]
        /**
         * 主键名
         */
    [/] public final static String PRIMARY_KEY_NAME = "[(${table.primaryKeyColumn.name})]";
    [# th:if="${table.primaryKeyColumn != null && table.generateOptions.entityFieldComment == true}"]
        /**
         * 主键 - 别名
         */
    [/] public final static String PRIMARY_KEY_ALIAS = "[(${table.getColumnAlias(table.primaryKeyColumn)})]";
    [# th:each="column : ${table.columns}"]
        [# th:if="${table.generateOptions.entityFieldComment == true}"]
            /**
             * [(${column.comment})]
             */
        [/] public final static String [(${column.name.toUpperCase()})] = "[(${column.name})]";
        [# th:if="${table.generateOptions.entityFieldComment == true}"]
            /**
             * [(${column.comment})] - 别名
             */
        [/] public final static String [(${column.name.toUpperCase()})]_ALIAS = "[(${table.getColumnAlias(column)})]";
    [/]
    [# th:if="${table.generateOptions.entityFieldComment == true}"]
        /**
         * 表列数据
         */
    [/] public final static Set<TableColumn> TABLE_COLUMNS;

    static {
        TABLE_COLUMNS = new LinkedHashSet<>([(${table.columns.size()})]);
        TableColumn primaryKeyTableColumn = new TableColumn(PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS, TABLE_NAME, TABLE_ALIAS, null, TABLE_COLUMNS);
        primaryKeyTableColumn.setPrimaryKeyColumnInfo(primaryKeyTableColumn);
        [# th:each="column : ${table.columns}"]
            TABLE_COLUMNS.add(new TableColumn([(${column.name.toUpperCase()})], [(${column.name.toUpperCase()})]_ALIAS, TABLE_NAME, TABLE_ALIAS, primaryKeyTableColumn, TABLE_COLUMNS));
        [/]
    }

    public static [(${table.tableAlias})][(${table.generateOptions.helperClassName})] helper() {
        return new [(${table.tableAlias})][(${table.generateOptions.helperClassName})]();
    }

    public static Join join() {
        return new Join(TABLE_ALIAS);
    }

    public static Join join(String tableAlias) {
        return new Join(tableAlias);
    }

    public static Column column() {
        return new Column(TABLE_ALIAS);
    }

    public static Column column(String tableAlias) {
        return new Column(tableAlias);
    }

    public static Where where() {
        return new Where(TABLE_ALIAS);
    }

    public static Where where(String tableAlias) {
        return new Where(tableAlias);
    }

    public static Group group() {
        return new Group(TABLE_ALIAS);
    }

    public static Group group(String tableAlias) {
        return new Group(tableAlias);
    }

    public static Having having() {
        return new Having(TABLE_ALIAS);
    }

    public static Having having(String tableAlias) {
        return new Having(tableAlias);
    }

    public static Sort sort() {
        return new Sort(TABLE_ALIAS);
    }

    public static Sort sort(String tableAlias) {
        return new Sort(tableAlias);
    }

    @Override
    public String getTableName() {
        return TABLE_NAME;
    }

    @Override
    public String getTableAlias() {
        return TABLE_ALIAS;
    }

    @Override
    public String getPrimaryKeyName() {
        return PRIMARY_KEY_NAME;
    }

    @Override
    public String getPrimaryKeyAlias() {
        return PRIMARY_KEY_ALIAS;
    }

    @Override
    public Set<TableColumn> getTableColumns() {
        return TABLE_COLUMNS;
    }

    @Override
    public [(${table.tableAlias})][(${table.generateOptions.helperClassName})] getSingleHelper() {
        return HELPER;
    }

    @Override
    public Join newJoinHelper(String tableAlias) {
        return join(tableAlias);
    }

    @Override
    public Column newColumnHelper(String tableAlias) {
        return column(tableAlias);
    }

    @Override
    public Where newWhereHelper(String tableAlias) {
        return where(tableAlias);
    }

    @Override
    public Group newGroupHelper(String tableAlias) {
        return group(tableAlias);
    }

    @Override
    public Having newHavingHelper(String tableAlias) {
        return having(tableAlias);
    }

    @Override
    public Sort newSortHelper(String tableAlias) {
        return sort(tableAlias);
    }

    public final static class Join extends JoinHelper<Join> {

        public Join() {
            super(TABLE_ALIAS);
        }

        public Join(String tableAlias) {
            super(tableAlias);
        }

        public JoinSqlPartDatumBuilder<Join> primaryKey() {
            return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS);
        }

        [# th:each="column : ${table.columns}"]
            public JoinSqlPartDatumBuilder<Join> [(${table.getColumnAlias(column)})]() {
                return this.apply(TABLE_NAME, TABLE_ALIAS, [(${column.name.toUpperCase()})], [(${column.name.toUpperCase()})]_ALIAS);
            }
        [/]

    }

    public final static class Column extends ColumnHelper<Column> {

        public Column() {
            super(TABLE_ALIAS);
        }

        public Column(String tableAlias) {
            super(tableAlias);
        }

        @Override
        public Set<TableColumn> getTableDefaultColumns() {
            return [(${table.tableAlias})][(${table.generateOptions.helperClassName})].HELPER.getTableColumns();
        }

        public Column primaryKey() {
            return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS).getHelper();
        }

        public Column primaryKey(ColumnHandler... columnHandlers) {
            return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS, columnHandlers).getHelper();
        }

        public Column primaryKey(String alias) {
            return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, alias).getHelper();
        }

        public Column primaryKey(String alias, ColumnHandler... columnHandlers) {
            return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, alias, columnHandlers).getHelper();
        }

        [# th:each="column : ${table.columns}"]
            public Column [(${table.getColumnAlias(column)})]() {
                return this.apply(TABLE_NAME, TABLE_ALIAS, [(${column.name.toUpperCase()})], [(${column.name.toUpperCase()})]_ALIAS).getHelper();
            }

            public Column [(${table.getColumnAlias(column)})](ColumnHandler... columnHandlers) {
                return this.apply(TABLE_NAME, TABLE_ALIAS, [(${column.name.toUpperCase()})], [(${column.name.toUpperCase()})]_ALIAS, columnHandlers).getHelper();
            }

            public Column [(${table.getColumnAlias(column)})](String alias) {
                return this.apply(TABLE_NAME, TABLE_ALIAS, [(${column.name.toUpperCase()})], alias).getHelper();
            }

            public Column [(${table.getColumnAlias(column)})](String alias, ColumnHandler... columnHandlers) {
                return this.apply(TABLE_NAME, TABLE_ALIAS, [(${column.name.toUpperCase()})], alias, columnHandlers).getHelper();
            }
        [/]

    }

    public final static class Where extends WhereHelper<Where> {

        public Where() {
            super(TABLE_ALIAS);
        }

        public Where(String tableAlias) {
            super(tableAlias);
        }

        public WhereSqlPartDatumBuilder<Where> primaryKey() {
            return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS);
        }

        [# th:each="column : ${table.columns}"]
            public WhereSqlPartDatumBuilder<Where> [(${table.getColumnAlias(column)})]() {
                return this.apply(TABLE_NAME, TABLE_ALIAS, [(${column.name.toUpperCase()})], [(${column.name.toUpperCase()})]_ALIAS);
            }
        [/]

    }

    public final static class Group extends GroupHelper<Group> {

        public Group() {
            super(TABLE_ALIAS);
        }

        public Group(String tableAlias) {
            super(tableAlias);
        }

        public Group primaryKey() {
            return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS).getHelper();
        }

        [# th:each="column : ${table.columns}"]
            public Group [(${table.getColumnAlias(column)})]() {
                return this.apply(TABLE_NAME, TABLE_ALIAS, [(${column.name.toUpperCase()})], [(${column.name.toUpperCase()})]_ALIAS).getHelper();
            }
        [/]

    }

    public final static class Having extends HavingHelper<Having> {

        public Having() {
            super(TABLE_ALIAS);
        }

        public Having(String tableAlias) {
            super(tableAlias);
        }

        public HavingSqlPartDatumBuilder<Having> primaryKey() {
            return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS);
        }

        public HavingSqlPartDatumBuilder<Having> primaryKey(ColumnHandler... columnHandlers) {
            return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS, columnHandlers);
        }

        [# th:each="column : ${table.columns}"]
            public HavingSqlPartDatumBuilder<Having> [(${table.getColumnAlias(column)})]() {
                return this.apply(TABLE_NAME, TABLE_ALIAS, [(${column.name.toUpperCase()})], [(${column.name.toUpperCase()})]_ALIAS);
            }

            public HavingSqlPartDatumBuilder<Having> [(${table.getColumnAlias(column)})](ColumnHandler... columnHandlers) {
                return this.apply(TABLE_NAME, TABLE_ALIAS, [(${column.name.toUpperCase()})], [(${column.name.toUpperCase()})]_ALIAS, columnHandlers);
            }
        [/]

    }

    public final static class Sort extends SortHelper<Sort> {

        public Sort() {
            super(TABLE_ALIAS);
        }

        public Sort(String tableAlias) {
            super(tableAlias);
        }

        public SortSqlPartDatumBuilder<Sort> primaryKey() {
            return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS);
        }

        [# th:each="column : ${table.columns}"]
            public SortSqlPartDatumBuilder<Sort> [(${table.getColumnAlias(column)})]() {
                return this.apply(TABLE_NAME, TABLE_ALIAS, [(${column.name.toUpperCase()})], [(${column.name.toUpperCase()})]_ALIAS);
            }
        [/]

    }

    public static class Sql extends pub.avalon.sqlhelper.core.engine.builder.Sql<[(${table.tableAlias})][(${table.generateOptions.helperClassName})], Join, Column, Where, Group, Having, Sort> {
        public Sql() {
            super(TABLE_ALIAS);
        }
        public Sql(String tableAlias) {
            super(tableAlias);
        }
    }

    public static class SqlJoin extends pub.avalon.sqlhelper.core.engine.builder.SqlJoin<Join> {
        public SqlJoin() {
            super(TABLE_ALIAS);
        }
        public SqlJoin(String tableAlias) {
            super(tableAlias);
        }
    }

    public static class SqlColumn extends pub.avalon.sqlhelper.core.engine.builder.SqlColumn<Column> {
        public SqlColumn() {
            super(TABLE_ALIAS);
        }
        public SqlColumn(String tableAlias) {
            super(tableAlias);
        }
    }

    public static class SqlWhere extends pub.avalon.sqlhelper.core.engine.builder.SqlWhere<Where> {
        public SqlWhere() {
            super(TABLE_ALIAS);
        }
        public SqlWhere(String tableAlias) {
            super(tableAlias);
        }
    }

    public static class SqlGroup extends pub.avalon.sqlhelper.core.engine.builder.SqlGroup<Group> {
        public SqlGroup() {
            super(TABLE_ALIAS);
        }
        public SqlGroup(String tableAlias) {
            super(tableAlias);
        }
    }

    public static class SqlHaving extends pub.avalon.sqlhelper.core.engine.builder.SqlHaving<Having> {
        public SqlHaving() {
            super(TABLE_ALIAS);
        }
        public SqlHaving(String tableAlias) {
            super(tableAlias);
        }
    }

    public static class SqlSort extends pub.avalon.sqlhelper.core.engine.builder.SqlSort<Sort> {
        public SqlSort() {
            super(TABLE_ALIAS);
        }
        public SqlSort(String tableAlias) {
            super(tableAlias);
        }
    }

}