package [[${setting.packagePath}]];

import pub.avalon.sqlhelper.core.beans.*;
import pub.avalon.sqlhelper.core.builder.*;
import pub.avalon.sqlhelper.core.helper.*;

import java.util.LinkedHashSet;
import java.util.Set;
import java.lang.String;

@SuppressWarnings("all")
public final class [(${table.tableAlias})][(${table.generateOptions.helperClassName})] implements TableHelper<[(${table.tableAlias})][(${table.generateOptions.helperClassName})], [(${table.tableAlias})][(${table.generateOptions.helperClassName})].On, [(${table.tableAlias})][(${table.generateOptions.helperClassName})].Column, [(${table.tableAlias})][(${table.generateOptions.helperClassName})].Where, [(${table.tableAlias})][(${table.generateOptions.helperClassName})].Group, [(${table.tableAlias})][(${table.generateOptions.helperClassName})].Sort> {
    [# th:if="${table.generateOptions.entityFieldComment == true}"]
        /**
         * 表名
         */
    [/] public final static String TABLE_NAME = "[(${table.tableName})]";
    [# th:if="${table.generateOptions.entityFieldComment == true}"]
        /**
         * 表 - 别名
         */
    [/] public final static String TABLE_ALIAS = "[(${table.tableAlias})]";
    [# th:if="${table.primaryKeyColumn != null && table.generateOptions.entityFieldComment == true}"]
        /**
         * 主键名
         */
    [/] public final static String PRIMARY_KEY_NAME = "[(${table.primaryKeyColumn.name})]";
    [# th:if="${table.primaryKeyColumn != null && table.generateOptions.entityFieldComment == true}"]
        /**
         * 主键 - 别名
         */
    [/] public final static String PRIMARY_KEY_ALIAS = "[(${table.getColumnAlias(table.primaryKeyColumn)})]";
    [# th:each="column : ${table.columns}"]
        [# th:if="${table.generateOptions.entityFieldComment == true}"]
            /**
             * [(${column.comment})]
             */
        [/] public final static String [(${column.name.toUpperCase()})] = "[(${column.name})]";
        [# th:if="${table.generateOptions.entityFieldComment == true}"]
            /**
             * [(${column.comment})] - 别名
             */
        [/] public final static String [(${column.name.toUpperCase()})]_ALIAS = "[(${table.getColumnAlias(column)})]";
    [/]
    [# th:if="${table.generateOptions.entityFieldComment == true}"]
        /**
         * 表列数据
         */
    [/] public final static Set<TableColumn> TABLE_COLUMNS;

    static {
        TABLE_COLUMNS = new LinkedHashSet<>([(${table.columns.size()})]);
        TableColumn primaryKeyTableColumn = new TableColumn(PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS, TABLE_NAME, TABLE_ALIAS, null, TABLE_COLUMNS);
        primaryKeyTableColumn.setPrimaryKeyColumnInfo(primaryKeyTableColumn);
        [# th:each="column : ${table.columns}"]
            TABLE_COLUMNS.add(new TableColumn([(${column.name.toUpperCase()})], [(${column.name.toUpperCase()})]_ALIAS, TABLE_NAME, TABLE_ALIAS, primaryKeyTableColumn, TABLE_COLUMNS));
        [/]
    }

    public static [(${table.tableAlias})][(${table.generateOptions.helperClassName})] helper() {
        return new [(${table.tableAlias})][(${table.generateOptions.helperClassName})]();
    }

    public static On on() {
        return new On();
    }

    public static Column column() {
        return new Column();
    }

    public static Where where() {
        return new Where();
    }

    public static Group group() {
        return new Group();
    }

    public static Sort sort() {
        return new Sort();
    }

    @Override
    public String getTableName() {
        return TABLE_NAME;
    }

    @Override
    public String getTableAlias() {
        return TABLE_ALIAS;
    }

    @Override
    public String getPrimaryKeyName() {
        return PRIMARY_KEY_NAME;
    }

    @Override
    public String getPrimaryKeyAlias() {
        return PRIMARY_KEY_ALIAS;
    }

    @Override
    public Set<TableColumn> getTableColumns() {
        return null;
    }

    @Override
    public [(${table.tableAlias})][(${table.generateOptions.helperClassName})] newHelper() {
        return helper();
    }

    @Override
    public On newOnHelper() {
        return on();
    }

    @Override
    public Column newColumnHelper() {
        return column();
    }

    @Override
    public Where newWhereHelper() {
        return where();
    }

    @Override
    public Group newGroupHelper() {
        return group();
    }

    @Override
    public Sort newSortHelper() {
        return sort();
    }

    public final static class On extends OnHelper<On> {

        private On() {
            super();
        }

        public OnSqlPartDatumBuilder<On> primaryKey() {
            return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS);
        }

        [# th:each="column : ${table.columns}"]
            public OnSqlPartDatumBuilder<On> [(${table.getColumnAlias(column)})]() {
                return this.apply(TABLE_NAME, TABLE_ALIAS, [(${column.name.toUpperCase()})], [(${column.name.toUpperCase()})]_ALIAS);
            }
        [/]

    }

    public final static class Column extends ColumnHelper<Column> {

        private Column() {
            super();
        }

        public Column primaryKey() {
            return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS).getHelper();
        }

        public Column primaryKey(String alias) {
            return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, alias).getHelper();
        }

        [# th:each="column : ${table.columns}"]
            public Column [(${table.getColumnAlias(column)})]() {
                return this.apply(TABLE_NAME, TABLE_ALIAS, [(${column.name.toUpperCase()})], [(${column.name.toUpperCase()})]_ALIAS).getHelper();
            }

            public Column [(${table.getColumnAlias(column)})](String alias) {
                return this.apply(TABLE_NAME, TABLE_ALIAS, [(${column.name.toUpperCase()})], alias).getHelper();
            }
        [/]

    }

    public final static class Where extends WhereHelper<Where> {

        private Where() {
            super();
        }

        public WhereSqlPartDatumBuilder<Where> primaryKey() {
            return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS);
        }

        [# th:each="column : ${table.columns}"]
            public WhereSqlPartDatumBuilder<Where> [(${table.getColumnAlias(column)})]() {
                return this.apply(TABLE_NAME, TABLE_ALIAS, [(${column.name.toUpperCase()})], [(${column.name.toUpperCase()})]_ALIAS);
            }
        [/]

    }

    public final static class Group extends GroupHelper<Group> {

        private Group() {
            super();
        }

        public Group primaryKey() {
            return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS).getHelper();
        }

        [# th:each="column : ${table.columns}"]
            public Group [(${table.getColumnAlias(column)})]() {
                return this.apply(TABLE_NAME, TABLE_ALIAS, [(${column.name.toUpperCase()})], [(${column.name.toUpperCase()})]_ALIAS).getHelper();
            }
        [/]

    }

    public final static class Sort extends SortHelper<Sort> {

        private Sort() {
            super();
        }

        public SortSqlPartDatumBuilder<Sort> primaryKey() {
            return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS);
        }

        [# th:each="column : ${table.columns}"]
            public SortSqlPartDatumBuilder<Sort> [(${table.getColumnAlias(column)})]() {
                return this.apply(TABLE_NAME, TABLE_ALIAS, [(${column.name.toUpperCase()})], [(${column.name.toUpperCase()})]_ALIAS);
            }
        [/]

    }

}