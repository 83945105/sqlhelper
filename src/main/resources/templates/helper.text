package [[${setting.packagePath}]];

import pub.avalon.sqlhelper.core.builder.*;
import pub.avalon.sqlhelper.core.helper.*;

import java.util.LinkedHashMap;
import java.util.Map;
import java.lang.String;

@SuppressWarnings("all")
public final class [(${table.tableAlias})][(${table.generateOptions.helperClassName})] implements TableHelper<[(${table.tableAlias})][(${table.generateOptions.helperClassName})], [(${table.tableAlias})][(${table.generateOptions.helperClassName})].On, [(${table.tableAlias})][(${table.generateOptions.helperClassName})].Column, [(${table.tableAlias})][(${table.generateOptions.helperClassName})].Where, [(${table.tableAlias})][(${table.generateOptions.helperClassName})].Group, [(${table.tableAlias})][(${table.generateOptions.helperClassName})].Sort> {
    [# th:if="${table.generateOptions.entityFieldComment == true}"]
        /**
         * 表名
         */
    [/] public final static String tableName = "[(${table.tableName})]";
    [# th:if="${table.generateOptions.entityFieldComment == true}"]
        /**
         * 表 - 别名
         */
    [/] public final static String tableAlias = "[(${table.tableAlias})]";
    [# th:if="${table.primaryKeyColumn != null && table.generateOptions.entityFieldComment == true}"]
        /**
         * 主键名
         */
    [/] public final static String primaryKeyName = "[(${table.primaryKeyColumn.name})]";
    [# th:if="${table.primaryKeyColumn != null && table.generateOptions.entityFieldComment == true}"]
        /**
         * 主键 - 别名
         */
    [/] public final static String primaryKeyAlias = "[(${table.getColumnAlias(table.primaryKeyColumn)})]";
    [# th:each="column : ${table.columns}"]
        [# th:if="${table.generateOptions.entityFieldComment == true}"]
            /**
             * [(${column.comment})]
             */
        [/] public final static String [(${column.name})] = "[(${column.name})]";
        [# th:if="${table.generateOptions.entityFieldComment == true}"]
            /**
             * [(${column.comment})] - 别名
             */
        [/] public final static String [(${column.name})]_alias = "[(${table.getColumnAlias(column)})]";
    [/]
    [# th:if="${table.generateOptions.entityFieldComment == true}"]
        /**
         *  列名 - 别名 键值对集合
         */
    [/] public final static Map<String, String> columnAliasMap;

    static {
        columnAliasMap = new LinkedHashMap<>([(${table.columns.size()})]);
    }

    public static On on() {
        return new On();
    }

    public static Column column() {
        return new Column();
    }

    public static Where where() {
        return new Where();
    }

    public static Group group() {
        return new Group();
    }

    public static Sort sort() {
        return new Sort();
    }

    @Override
    public Map<String, String> getColumnAliasMap() {
        return columnAliasMap;
    }

    @Override
    public String getTableName() {
        return tableName;
    }

    @Override
    public String getTableAlias() {
        return tableAlias;
    }

    @Override
    public String getPrimaryKeyName() {
        return primaryKeyName;
    }

    @Override
    public String getPrimaryKeyAlias() {
        return primaryKeyAlias;
    }

    @Override
    public On newOnHelper() {
        return on();
    }

    @Override
    public Column newColumnHelper() {
        return column();
    }

    @Override
    public Where newWhereHelper() {
        return where();
    }

    @Override
    public Group newGroupHelper() {
        return group();
    }

    @Override
    public Sort newSortHelper() {
        return sort();
    }

    public final static class On extends OnHelper<On> {

        private On() {
            super(new OnSqlDataBuilder<>());
        }

        public OnSqlDataBuilder<On> primaryKey() {
            return this.apply(tableName, tableAlias, primaryKeyName, primaryKeyAlias);
        }

        [# th:each="column : ${table.columns}"]
            public OnSqlDataBuilder<On> [(${table.getColumnAlias(column)})]() {
                return this.apply(tableName, tableAlias, [(${column.name})], [(${column.name})]_alias);
            }
        [/]

    }

    public final static class Column extends ColumnHelper<Column> {

        private Column() {
            super(new ColumnSqlDataBuilder<>());
        }

        public Column primaryKey() {
            return this.apply(tableName, tableAlias, primaryKeyName, primaryKeyAlias).getSqlModel();
        }

        public Column primaryKey(String alias) {
            return this.apply(tableName, tableAlias, primaryKeyName, alias).getSqlModel();
        }

        [# th:each="column : ${table.columns}"]
            public Column [(${table.getColumnAlias(column)})]() {
                return this.apply(tableName, tableAlias, [(${column.name})], [(${column.name})]_alias).getSqlModel();
            }

            public Column [(${table.getColumnAlias(column)})](String alias) {
                return this.apply(tableName, tableAlias, [(${column.name})], alias).getSqlModel();
            }
        [/]

    }

    public final static class Where extends WhereHelper<Where> {

        private Where() {
            super(new WhereSqlDataBuilder<>());
        }

        public WhereSqlDataBuilder<Where> primaryKey() {
            return this.apply(tableName, tableAlias, primaryKeyName, primaryKeyAlias);
        }

        [# th:each="column : ${table.columns}"]
            public WhereSqlDataBuilder<Where> [(${table.getColumnAlias(column)})]() {
                return this.apply(tableName, tableAlias, [(${column.name})], [(${column.name})]_alias);
            }
        [/]

    }

    public final static class Group extends GroupHelper<Group> {

        private Group() {
            super(new GroupSqlDataBuilder<>());
        }

        public Group primaryKey() {
            return this.apply(tableName, tableAlias, primaryKeyName, primaryKeyAlias).getSqlModel();
        }

        [# th:each="column : ${table.columns}"]
            public Group [(${table.getColumnAlias(column)})]() {
                return this.apply(tableName, tableAlias, [(${column.name})], [(${column.name})]_alias).getSqlModel();
            }
        [/]

    }

    public final static class Sort extends SortHelper<Sort> {

        private Sort() {
            super(new SortSqlDataBuilder<>());
        }

        public SortSqlDataBuilder<Sort> primaryKey() {
            return this.apply(tableName, tableAlias, primaryKeyName, primaryKeyAlias);
        }

        [# th:each="column : ${table.columns}"]
            public SortSqlDataBuilder<Sort> [(${table.getColumnAlias(column)})]() {
                return this.apply(tableName, tableAlias, [(${column.name})], [(${column.name})]_alias);
            }
        [/]

    }

}