package pub.avalon.sqlhelper.readme.entity;

import pub.avalon.sqlhelper.core.beans.ColumnHandler;
import pub.avalon.sqlhelper.core.beans.TableColumn;
import pub.avalon.sqlhelper.core.builder.HavingSqlPartDatumBuilder;
import pub.avalon.sqlhelper.core.builder.OnSqlPartDatumBuilder;
import pub.avalon.sqlhelper.core.builder.SortSqlPartDatumBuilder;
import pub.avalon.sqlhelper.core.builder.WhereSqlPartDatumBuilder;
import pub.avalon.sqlhelper.core.helper.*;

import java.util.LinkedHashSet;
import java.util.Set;
#foreach($classPath in ${table.classPaths})
import $!{classPath};
#end

@SuppressWarnings("all")
public class $!{table.tableAlias}$!{table.generateOptions.entitySuffix} {

    #foreach($column in ${table.columns})
    #if(${table.generateOptions.entityFieldComment})
    /**
     * $!{column.comment}
     */
    #end
    private $!{table.getJavaType(${column}).className} $!{table.getColumnAlias(${column})};
    #end

    #foreach($column in ${table.columns})
    public $!{table.getJavaType(${column}).className} $!{table.getGetterMethodName(${column})}() {
        return this.$!{table.getColumnAlias(${column})};
    }
    #if(${table.generateOptions.entityChainStyle})
    public $!{table.tableAlias}$!{table.generateOptions.entitySuffix} $!{table.getSetterMethodName(${column})}($!{table.getJavaType(${column}).className} $!{table.getColumnAlias(${column})}) {
        this.$!{table.getColumnAlias(${column})} = $!{table.getColumnAlias(${column})};
        return this;
    }
    #else
    public void $!{table.getSetterMethodName(${column})}($!{table.getJavaType(${column}).className} $!{table.getColumnAlias(${column})}) {
        this.$!{table.getColumnAlias(${column})} = $!{table.getColumnAlias(${column})};
    }
    #end
    #end

    public final static class $!{table.generateOptions.helperClassName} implements TableHelper<$!{table.generateOptions.helperClassName}, $!{table.generateOptions.helperClassName}.On, $!{table.generateOptions.helperClassName}.Column, $!{table.generateOptions.helperClassName}.Where, $!{table.generateOptions.helperClassName}.Group, $!{table.generateOptions.helperClassName}.Having, $!{table.generateOptions.helperClassName}.Sort> {

        public final static $!{table.generateOptions.helperClassName} DEFAULT_INSTANCE = new $!{table.generateOptions.helperClassName}();

        #if(${table.generateOptions.entityFieldComment})
        /**
         * table name
         */
        #end
        public final static String TABLE_NAME = "$!{table.tableName}";
        #if(${table.generateOptions.entityFieldComment})
        /**
         * table alias
         */
        public final static String TABLE_ALIAS = "$!{table.tableAlias}";
        #end
        #if(${table.primaryKeyColumn})
        #if(${table.generateOptions.entityFieldComment})
        /**
         * primary key name
         */
        #end
        public final static String PRIMARY_KEY_NAME = "$!{table.primaryKeyColumn.name}";
        #if(${table.generateOptions.entityFieldComment})
        /**
         * primary key alias
         */
        #end
        public final static String PRIMARY_KEY_ALIAS = "$!{table.getColumnAlias(${table.primaryKeyColumn})}";
        #end

        #foreach(${column} in ${table.columns})
        #if(${table.generateOptions.entityFieldComment})
        /**
         * $!{column.comment}
         */
        #end
        public final static String $!{column.name.toUpperCase()} = "$!{column.name}";
        #if(${table.generateOptions.entityFieldComment})
        /**
         * $!{column.comment} alias
         */
        #end
        public final static String $!{column.name.toUpperCase()}_ALIAS = "$!{table.getColumnAlias(${column})}";
        #end

        #if(${table.generateOptions.entityFieldComment})
        /**
         * table columns
         */
        #end
        public final static Set<TableColumn> TABLE_COLUMNS;

        static {
            TABLE_COLUMNS = new LinkedHashSet<>($!{table.columns.size()});
            TableColumn primaryKeyTableColumn = new TableColumn(PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS, TABLE_NAME, TABLE_ALIAS, null, TABLE_COLUMNS);
            primaryKeyTableColumn.setPrimaryKeyColumnInfo(primaryKeyTableColumn);
            #foreach($column in ${table.columns})
            TABLE_COLUMNS.add(new TableColumn($!{column.name.toUpperCase()}, $!{column.name.toUpperCase()}_ALIAS, TABLE_NAME, TABLE_ALIAS, primaryKeyTableColumn, TABLE_COLUMNS));
            #end
        }

        public static $!{table.generateOptions.helperClassName} newInstance() {
            return new $!{table.generateOptions.helperClassName}();
        }

        public static On on() {
            return new On(TABLE_ALIAS);
        }

        public static On on(String tableAlias) {
            return new On(tableAlias);
        }

        public static Column column() {
            return new Column(TABLE_ALIAS);
        }

        public static Column column(String tableAlias) {
            return new Column(tableAlias);
        }

        public static Where where() {
            return new Where(TABLE_ALIAS);
        }

        public static Where where(String tableAlias) {
            return new Where(tableAlias);
        }

        public static Group groupBy() {
            return new Group(TABLE_ALIAS);
        }

        public static Group groupBy(String tableAlias) {
            return new Group(tableAlias);
        }

        public static Having having() {
            return new Having(TABLE_ALIAS);
        }

        public static Having having(String tableAlias) {
            return new Having(tableAlias);
        }

        public static Sort orderBy() {
            return new Sort(TABLE_ALIAS);
        }

        public static Sort orderBy(String tableAlias) {
            return new Sort(tableAlias);
        }

        @Override
        public String getTableName() {
            return TABLE_NAME;
        }

        @Override
        public String getTableAlias() {
            return TABLE_ALIAS;
        }

        @Override
        public String getPrimaryKeyName() {
            return PRIMARY_KEY_NAME;
        }

        @Override
        public String getPrimaryKeyAlias() {
            return PRIMARY_KEY_ALIAS;
        }

        @Override
        public Set<TableColumn> getTableColumns() {
            return TABLE_COLUMNS;
        }

        @Override
        public $!{table.generateOptions.helperClassName} getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public On newOnHelper(String tableAlias) {
            return on(tableAlias);
        }

        @Override
        public Column newColumnHelper(String tableAlias) {
            return column(tableAlias);
        }

        @Override
        public Where newWhereHelper(String tableAlias) {
            return where(tableAlias);
        }

        @Override
        public Group newGroupHelper(String tableAlias) {
            return groupBy(tableAlias);
        }

        @Override
        public Having newHavingHelper(String tableAlias) {
            return having(tableAlias);
        }

        @Override
        public Sort newSortHelper(String tableAlias) {
            return orderBy(tableAlias);
        }

        public final static class On extends OnHelper<On> {

            public On() {
                super(TABLE_ALIAS);
            }

            public On(String tableAlias) {
                super(tableAlias);
            }

            @Override
            public $!{table.generateOptions.helperClassName} getDefaultTableHelper() {
                return DEFAULT_INSTANCE.getDefaultInstance();
            }

            public OnSqlPartDatumBuilder<On> sqlPart(String sqlPart) {
                return this.apply(TABLE_NAME, TABLE_ALIAS, sqlPart);
            }

            public OnSqlPartDatumBuilder<On> primaryKey() {
                return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS, PRIMARY_KEY_ALIAS);
            }

            #foreach($column in ${table.columns})
            public OnSqlPartDatumBuilder<On> $!{table.getColumnAlias(${column})}() {
                return this.apply(TABLE_NAME, TABLE_ALIAS, $!{column.name.toUpperCase()}, $!{column.name.toUpperCase()}_ALIAS, $!{column.name.toUpperCase()}_ALIAS);
            }
            #end
        }

        public final static class Column extends ColumnHelper<Column> {

            public Column() {
                super(TABLE_ALIAS);
            }

            public Column(String tableAlias) {
                super(tableAlias);
            }

            @Override
            public $!{table.generateOptions.helperClassName} getDefaultTableHelper() {
                return DEFAULT_INSTANCE.getDefaultInstance();
            }

            @Override
            public Set<TableColumn> getTableDefaultColumns() {
                return DEFAULT_INSTANCE.getTableColumns();
            }

            public Column sqlPart(String sqlPart) {
                return this.apply(TABLE_NAME, TABLE_ALIAS, sqlPart).getHelper();
            }

            public Column primaryKey() {
                return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS, PRIMARY_KEY_ALIAS).getHelper();
            }

            public Column primaryKey(ColumnHandler... columnHandlers) {
                return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS, PRIMARY_KEY_ALIAS, columnHandlers).getHelper();
            }

            public Column primaryKey(String alias) {
                return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS, alias).getHelper();
            }

            public Column primaryKey(String alias, ColumnHandler... columnHandlers) {
                return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS, alias, columnHandlers).getHelper();
            }

            #foreach($column in ${table.columns})
            public Column $!{table.getColumnAlias(${column})}() {
                return this.apply(TABLE_NAME, TABLE_ALIAS, $!{column.name.toUpperCase()}, $!{column.name.toUpperCase()}_ALIAS, $!{column.name.toUpperCase()}_ALIAS).getHelper();
            }

            public Column $!{table.getColumnAlias(${column})}(ColumnHandler... columnHandlers) {
                return this.apply(TABLE_NAME, TABLE_ALIAS, $!{column.name.toUpperCase()}, $!{column.name.toUpperCase()}_ALIAS, $!{column.name.toUpperCase()}_ALIAS, columnHandlers).getHelper();
            }

            public Column $!{table.getColumnAlias(${column})}(String alias) {
                return this.apply(TABLE_NAME, TABLE_ALIAS, $!{column.name.toUpperCase()}, $!{column.name.toUpperCase()}_ALIAS, alias).getHelper();
            }

            public Column $!{table.getColumnAlias(${column})}(String alias, ColumnHandler... columnHandlers) {
                return this.apply(TABLE_NAME, TABLE_ALIAS, $!{column.name.toUpperCase()}, $!{column.name.toUpperCase()}_ALIAS, alias, columnHandlers).getHelper();
            }
            #end
        }

        public final static class Where extends WhereHelper<Where> {

            public Where() {
                super(TABLE_ALIAS);
            }

            public Where(String tableAlias) {
                super(tableAlias);
            }

            @Override
            public $!{table.generateOptions.helperClassName} getDefaultTableHelper() {
                return DEFAULT_INSTANCE.getDefaultInstance();
            }

            public WhereSqlPartDatumBuilder<Where> sqlPart(String sqlPart) {
                return this.apply(TABLE_NAME, TABLE_ALIAS, sqlPart);
            }

            public WhereSqlPartDatumBuilder<Where> primaryKey() {
                return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS, PRIMARY_KEY_ALIAS);
            }

            #foreach($column in ${table.columns})
            public WhereSqlPartDatumBuilder<Where> $!{table.getColumnAlias(${column})}() {
                return this.apply(TABLE_NAME, TABLE_ALIAS, $!{column.name.toUpperCase()}, $!{column.name.toUpperCase()}_ALIAS, $!{column.name.toUpperCase()}_ALIAS);
            }
            #end
        }

        public final static class Group extends GroupHelper<Group> {

            public Group() {
                super(TABLE_ALIAS);
            }

            public Group(String tableAlias) {
                super(tableAlias);
            }

            @Override
            public $!{table.generateOptions.helperClassName} getDefaultTableHelper() {
                return DEFAULT_INSTANCE.getDefaultInstance();
            }

            public Group sqlPart(String sqlPart) {
                return this.apply(TABLE_NAME, TABLE_ALIAS, sqlPart).getHelper();
            }

            public Group primaryKey() {
                return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS, PRIMARY_KEY_ALIAS).getHelper();
            }

            #foreach($column in ${table.columns})
            public Group $!{table.getColumnAlias(${column})}() {
                return this.apply(TABLE_NAME, TABLE_ALIAS, $!{column.name.toUpperCase()}, $!{column.name.toUpperCase()}_ALIAS, $!{column.name.toUpperCase()}_ALIAS).getHelper();
            }
            #end
        }

        public final static class Having extends HavingHelper<Having> {

            public Having() {
                super(TABLE_ALIAS);
            }

            public Having(String tableAlias) {
                super(tableAlias);
            }

            @Override
            public $!{table.generateOptions.helperClassName} getDefaultTableHelper() {
                return DEFAULT_INSTANCE.getDefaultInstance();
            }

            public HavingSqlPartDatumBuilder<Having> sqlPart(String sqlPart) {
                return this.apply(TABLE_NAME, TABLE_ALIAS, sqlPart);
            }

            public HavingSqlPartDatumBuilder<Having> primaryKey() {
                return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS, PRIMARY_KEY_ALIAS);
            }

            public HavingSqlPartDatumBuilder<Having> primaryKey(ColumnHandler... columnHandlers) {
                return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS, PRIMARY_KEY_ALIAS, columnHandlers);
            }

            #foreach($column in ${table.columns})
            public HavingSqlPartDatumBuilder<Having> $!{table.getColumnAlias(${column})}() {
                return this.apply(TABLE_NAME, TABLE_ALIAS, $!{column.name.toUpperCase()}, $!{column.name.toUpperCase()}_ALIAS, $!{column.name.toUpperCase()}_ALIAS);
            }

            public HavingSqlPartDatumBuilder<Having> $!{table.getColumnAlias(${column})}(ColumnHandler... columnHandlers) {
                return this.apply(TABLE_NAME, TABLE_ALIAS, $!{column.name.toUpperCase()}, $!{column.name.toUpperCase()}_ALIAS, $!{column.name.toUpperCase()}_ALIAS, columnHandlers);
            }
            #end
        }

        public final static class Sort extends SortHelper<Sort> {

            public Sort() {
                super(TABLE_ALIAS);
            }

            public Sort(String tableAlias) {
                super(tableAlias);
            }

            @Override
            public $!{table.generateOptions.helperClassName} getDefaultTableHelper() {
                return DEFAULT_INSTANCE.getDefaultInstance();
            }

            public SortSqlPartDatumBuilder<Sort> sqlPart(String sqlPart) {
                return this.apply(TABLE_NAME, TABLE_ALIAS, sqlPart);
            }

            public SortSqlPartDatumBuilder<Sort> primaryKey() {
                return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS, PRIMARY_KEY_ALIAS);
            }

            #foreach($column in ${table.columns})
            public SortSqlPartDatumBuilder<Sort> $!{table.getColumnAlias(${column})}() {
                return this.apply(TABLE_NAME, TABLE_ALIAS, $!{column.name.toUpperCase()}, $!{column.name.toUpperCase()}_ALIAS, $!{column.name.toUpperCase()}_ALIAS);
            }
            #end
        }

        public static class Sql extends pub.avalon.sqlhelper.core.engine.builder.Sql<$!{table.generateOptions.helperClassName}, On, Column, Where, Group, Having, Sort> {
            public Sql() {
                super(TABLE_ALIAS);
            }
            public Sql(String tableAlias) {
                super(tableAlias);
            }
        }

        public static class SqlJoin extends pub.avalon.sqlhelper.core.engine.builder.SqlJoin<On> {
            public SqlJoin() {
                super(TABLE_ALIAS);
            }
            public SqlJoin(String tableAlias) {
                super(tableAlias);
            }
        }

        public static class SqlColumn extends pub.avalon.sqlhelper.core.engine.builder.SqlColumn<Column> {
            public SqlColumn() {
                super(TABLE_ALIAS);
            }
            public SqlColumn(String tableAlias) {
                super(tableAlias);
            }
        }

        public static class SqlWhere extends pub.avalon.sqlhelper.core.engine.builder.SqlWhere<Where> {
            public SqlWhere() {
                super(TABLE_ALIAS);
            }
            public SqlWhere(String tableAlias) {
                super(tableAlias);
            }
        }

        public static class SqlGroup extends pub.avalon.sqlhelper.core.engine.builder.SqlGroup<Group> {
            public SqlGroup() {
                super(TABLE_ALIAS);
            }
            public SqlGroup(String tableAlias) {
                super(tableAlias);
            }
        }

        public static class SqlHaving extends pub.avalon.sqlhelper.core.engine.builder.SqlHaving<Having> {
            public SqlHaving() {
                super(TABLE_ALIAS);
            }
            public SqlHaving(String tableAlias) {
                super(tableAlias);
            }
        }

        public static class SqlSort extends pub.avalon.sqlhelper.core.engine.builder.SqlSort<Sort> {
            public SqlSort() {
                super(TABLE_ALIAS);
            }
            public SqlSort(String tableAlias) {
                super(tableAlias);
            }
        }
    }
}